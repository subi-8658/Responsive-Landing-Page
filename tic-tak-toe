<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tic-Tac-Toe Web Application</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: linear-gradient(to right, #2b1055, #7597de);
      color: white;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
    }

    h1 {
      margin-bottom: 20px;
    }

    #gameBoard {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 5px;
    }

    .cell {
      background-color: white;
      color: #2b1055;
      font-size: 2rem;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 10px;
      cursor: pointer;
      transition: 0.3s;
    }

    .cell:hover {
      background-color: #ddd;
    }

    #status {
      margin-top: 20px;
      font-size: 1.2rem;
    }

    #resetBtn {
      margin-top: 10px;
      padding: 10px 20px;
      font-size: 1rem;
      background-color: #4e54c8;
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
    }

    #resetBtn:hover {
      background-color: #6c63ff;
    }
  </style>
</head>
<body>

  <h1>Tic-Tac-Toe</h1>
  <div id="gameBoard"></div>
  <div id="status">Player X's Turn</div>
  <button id="resetBtn" onclick="resetGame()">Restart Game</button>

  <script>
    const board = document.getElementById("gameBoard");
    const statusText = document.getElementById("status");
    let currentPlayer = "X";
    let gameActive = true;
    let cells = Array(9).fill("");

    function createBoard() {
      board.innerHTML = "";
      cells.forEach((val, i) => {
        const cell = document.createElement("div");
        cell.classList.add("cell");
        cell.dataset.index = i;
        cell.innerText = val;
        cell.addEventListener("click", handleClick);
        board.appendChild(cell);
      });
    }

    function handleClick(e) {
      const index = e.target.dataset.index;
      if (!gameActive || cells[index]) return;

      cells[index] = currentPlayer;
      createBoard();

      if (checkWin()) {
        statusText.innerText = `Player ${currentPlayer} Wins!`;
        gameActive = false;
      } else if (cells.every(cell => cell !== "")) {
        statusText.innerText = "It's a Tie!";
        gameActive = false;
      } else {
        currentPlayer = currentPlayer === "X" ? "O" : "X";
        statusText.innerText = `Player ${currentPlayer}'s Turn`;
      }
    }

    function checkWin() {
      const winPatterns = [
        [0,1,2], [3,4,5], [6,7,8], // rows
        [0,3,6], [1,4,7], [2,5,8], // columns
        [0,4,8], [2,4,6]           // diagonals
      ];

      return winPatterns.some(pattern => 
        pattern.every(index => cells[index] === currentPlayer)
      );
    }

    function resetGame() {
      cells = Array(9).fill("");
      currentPlayer = "X";
      gameActive = true;
      statusText.innerText = `Player X's Turn`;
      createBoard();
    }

    // Initialize game
    createBoard();
  </script>
</body>
</html>
